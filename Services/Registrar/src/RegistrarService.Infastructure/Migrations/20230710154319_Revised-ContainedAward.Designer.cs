// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RegistrarService.Infastructure.Context;

#nullable disable

namespace RegistrarService.Infastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230710154319_Revised-ContainedAward")]
    partial class RevisedContainedAward
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("StudentService.Domain.Entities.Award", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbr")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("DegreeCategory")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("QualificationLevel")
                        .HasColumnType("int");

                    b.Property<string>("QualificationType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Awards");

                    b.HasData(
                        new
                        {
                            Id = 91,
                            Abbr = "HNCSc",
                            DegreeCategory = "Foundation",
                            Name = "Certificate of Higher Education in Science",
                            QualificationLevel = 5,
                            QualificationType = "Certificate"
                        },
                        new
                        {
                            Id = 92,
                            Abbr = "HNCSc",
                            DegreeCategory = "Foundation",
                            Name = "Higher National Certificate in Science",
                            QualificationLevel = 4,
                            QualificationType = "Certificate"
                        },
                        new
                        {
                            Id = 93,
                            Abbr = "awardSc",
                            DegreeCategory = "Foundation",
                            Name = "Level 4 Award in Science",
                            QualificationLevel = 4,
                            QualificationType = "Award"
                        },
                        new
                        {
                            Id = 94,
                            Abbr = "Lvl4Sc",
                            DegreeCategory = "Foundation",
                            Name = "Level 4 Certificate in Science",
                            QualificationLevel = 4,
                            QualificationType = "Certificate"
                        },
                        new
                        {
                            Id = 95,
                            Abbr = "CertHEdSc",
                            DegreeCategory = "Undergraduate",
                            Name = "Certificate of Higher Education in Science",
                            QualificationLevel = 5,
                            QualificationType = "Certificate"
                        },
                        new
                        {
                            Id = 96,
                            Abbr = "FdA",
                            DegreeCategory = "Undergraduate",
                            Name = "Foundation Degree In Education",
                            QualificationLevel = 5,
                            QualificationType = "Degree"
                        },
                        new
                        {
                            Id = 97,
                            Abbr = "FdSc",
                            DegreeCategory = "Undergraduate",
                            Name = "Foundation Degree In Science",
                            QualificationLevel = 5,
                            QualificationType = "Degree"
                        },
                        new
                        {
                            Id = 98,
                            Abbr = "BSc",
                            DegreeCategory = "Undergraduate",
                            Name = "Bachelor of Science",
                            QualificationLevel = 6,
                            QualificationType = "Degree"
                        },
                        new
                        {
                            Id = 99,
                            Abbr = "BSc",
                            DegreeCategory = "Undergraduate",
                            Name = "Bachelor of Science",
                            QualificationLevel = 6,
                            QualificationType = "Degree"
                        },
                        new
                        {
                            Id = 101,
                            Abbr = "BA",
                            DegreeCategory = "Undergraduate",
                            Name = "Bachelor of Arts",
                            QualificationLevel = 6,
                            QualificationType = "Degree"
                        },
                        new
                        {
                            Id = 102,
                            Abbr = "BEng",
                            DegreeCategory = "Undergraduate",
                            Name = "Bachelor of Engineering",
                            QualificationLevel = 6,
                            QualificationType = "Degree"
                        },
                        new
                        {
                            Id = 103,
                            Abbr = "BEd",
                            DegreeCategory = "Undergraduate",
                            Name = "Bachelor of Education",
                            QualificationLevel = 6,
                            QualificationType = "Degree"
                        },
                        new
                        {
                            Id = 104,
                            Abbr = "LLB",
                            DegreeCategory = "Undergraduate",
                            Name = "Bachelor of Law",
                            QualificationLevel = 6,
                            QualificationType = "Degree"
                        },
                        new
                        {
                            Id = 105,
                            Abbr = "MB",
                            DegreeCategory = "Undergraduate",
                            Name = "Bachelor of Medicine",
                            QualificationLevel = 6,
                            QualificationType = "Degree"
                        },
                        new
                        {
                            Id = 106,
                            Abbr = "ChB",
                            DegreeCategory = "Undergraduate",
                            Name = "Bachelor of Surgery",
                            QualificationLevel = 6,
                            QualificationType = "Degree"
                        },
                        new
                        {
                            Id = 107,
                            Abbr = "MSc",
                            DegreeCategory = "Undergraduate",
                            Name = "Master of Philosophy",
                            QualificationLevel = 7,
                            QualificationType = "Degree"
                        },
                        new
                        {
                            Id = 108,
                            Abbr = "MSc",
                            DegreeCategory = "Undergraduate",
                            Name = "Master of Science",
                            QualificationLevel = 7,
                            QualificationType = "Degree"
                        },
                        new
                        {
                            Id = 109,
                            Abbr = "MA",
                            DegreeCategory = "Undergraduate",
                            Name = "Master of Arts",
                            QualificationLevel = 7,
                            QualificationType = "Degree"
                        },
                        new
                        {
                            Id = 110,
                            Abbr = "MEng",
                            DegreeCategory = "Undergraduate",
                            Name = "Master of Engineering",
                            QualificationLevel = 7,
                            QualificationType = "Degree"
                        },
                        new
                        {
                            Id = 111,
                            Abbr = "MEd",
                            DegreeCategory = "Undergraduate",
                            Name = "Master of Education",
                            QualificationLevel = 7,
                            QualificationType = "Degree"
                        },
                        new
                        {
                            Id = 112,
                            Abbr = "LLM",
                            DegreeCategory = "Undergraduate",
                            Name = "Master of Law",
                            QualificationLevel = 7,
                            QualificationType = "Degree"
                        });
                });

            modelBuilder.Entity("StudentService.Domain.Entities.ContainedAward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AwardId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AwardId");

                    b.HasIndex("CourseId");

                    b.ToTable("ContainedAwards");
                });

            modelBuilder.Entity("StudentService.Domain.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AwardId")
                        .HasColumnType("int");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CourseType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasAlternateKey("CourseCode", "IsActive");

                    b.HasIndex("AwardId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AwardId = 100,
                            CourseCode = "L27",
                            CourseType = "FullTime",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 3,
                            IsActive = true,
                            Name = "Computer Science",
                            SchoolId = 2,
                            SubjectId = 7,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("StudentService.Domain.Entities.CourseLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("QualificationLevel")
                        .HasColumnType("int");

                    b.Property<decimal>("TuitionFee")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseOfferings");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Credits = 120,
                            Name = "Computer Science Level 4",
                            QualificationLevel = 4,
                            TuitionFee = 9250m,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Credits = 120,
                            Name = "Computer Science Level 5",
                            QualificationLevel = 5,
                            TuitionFee = 9250m,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Credits = 120,
                            Name = "Computer Science Level 6",
                            QualificationLevel = 6,
                            TuitionFee = 9250m,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("StudentService.Domain.Entities.CourseRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseRegistrations");
                });

            modelBuilder.Entity("StudentService.Domain.Entities.Enrolment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EnrolDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CourseLevelId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrolments");
                });

            modelBuilder.Entity("StudentService.Domain.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("School");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "School of Arts",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "School of Build Environment, Engineering, and Computing",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "School of Business",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "School of Health",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "School of SocialSciences",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "School of Education",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "School of Law",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "School of Sports",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("StudentService.Domain.Entities.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccountNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TranscriptId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("StudentId");

                    b.HasAlternateKey("AccountNumber");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("StudentService.Domain.Entities.StudentResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseLevelId")
                        .HasColumnType("int");

                    b.Property<string>("CourseLevelName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ProgressDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProgressDecision")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProgressNotes")
                        .HasColumnType("varchar(450)");

                    b.Property<int>("TranscriptId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CourseLevelId");

                    b.HasIndex("TranscriptId");

                    b.ToTable("CourseResults");
                });

            modelBuilder.Entity("StudentService.Domain.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Subject");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Accounting and Finance",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Art and Design",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Architecture and Landscape Design",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Biomedical Sciences",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Business and Management",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Civil Engineering",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Computing and Engineering",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Creative Technologies",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Criminology, Psychology, and Sociology",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dietetics and Nutrition",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Economics and Analytics",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Education and Teaching",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "English Language Study",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Engish, History, and Media",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Events Management",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Film",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Geography, Planning, and Housing",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Law",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Marketing, PR, and Journalism",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Music and Sound",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nursing, Healthcare, and Health Promotion",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 22,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Performing Arts",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 23,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Politics and International Relations",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 24,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Psychological Therapies and Mental Health",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 25,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rehabilitation Therapies",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 26,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Safety and Environmental Health",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 27,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Social and Communication Studies",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 28,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Speech and Language Sciences",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 29,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sport",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 30,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Surveying, Construction, and Project Management",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 31,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tourism and Hospitality Management",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("StudentService.Domain.Entities.Transcript", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("Transcripts");
                });

            modelBuilder.Entity("StudentService.Domain.Entities.ContainedAward", b =>
                {
                    b.HasOne("StudentService.Domain.Entities.Award", "Award")
                        .WithMany()
                        .HasForeignKey("AwardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentService.Domain.Entities.Course", "Course")
                        .WithMany("ContainedAwards")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Award");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("StudentService.Domain.Entities.Course", b =>
                {
                    b.HasOne("StudentService.Domain.Entities.Award", "Award")
                        .WithMany("Courses")
                        .HasForeignKey("AwardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentService.Domain.Entities.School", "School")
                        .WithMany("Courses")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentService.Domain.Entities.Subject", "Subject")
                        .WithMany("Courses")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Award");

                    b.Navigation("School");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("StudentService.Domain.Entities.CourseLevel", b =>
                {
                    b.HasOne("StudentService.Domain.Entities.Course", "Course")
                        .WithMany("CourseLevels")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("StudentService.Domain.Entities.CourseRegistration", b =>
                {
                    b.HasOne("StudentService.Domain.Entities.Course", "Course")
                        .WithMany("Registrations")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentService.Domain.Entities.Student", "Student")
                        .WithMany("Registrations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentService.Domain.Entities.Enrolment", b =>
                {
                    b.HasOne("StudentService.Domain.Entities.CourseLevel", "CourseLevel")
                        .WithMany()
                        .HasForeignKey("CourseLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentService.Domain.Entities.Student", "Student")
                        .WithMany("Enrolments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseLevel");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentService.Domain.Entities.Student", b =>
                {
                    b.OwnsOne("StudentService.Domain.ValueObjects.Contact", "ContactDetail", b1 =>
                        {
                            b1.Property<string>("StudentId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("AlternateEmail")
                                .IsRequired()
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("varchar(20)");

                            b1.Property<string>("StudentEmail")
                                .IsRequired()
                                .HasColumnType("varchar(255)");

                            b1.HasKey("StudentId");

                            b1.ToTable("Students");

                            b1.WithOwner("Student")
                                .HasForeignKey("StudentId");

                            b1.OwnsOne("StudentService.Domain.ValueObjects.Address", "PermanentAddress", b2 =>
                                {
                                    b2.Property<string>("ContactStudentId")
                                        .HasColumnType("varchar(255)");

                                    b2.Property<string>("Country")
                                        .IsRequired()
                                        .HasColumnType("varchar(30)");

                                    b2.Property<string>("County_Region")
                                        .HasColumnType("varchar(50)");

                                    b2.Property<string>("LineOne")
                                        .IsRequired()
                                        .HasColumnType("varchar(100)");

                                    b2.Property<string>("LineThree")
                                        .HasColumnType("varchar(100)");

                                    b2.Property<string>("LineTwo")
                                        .HasColumnType("varchar(100)");

                                    b2.Property<string>("PostCode")
                                        .IsRequired()
                                        .HasColumnType("varchar(20)");

                                    b2.Property<string>("Town_City")
                                        .IsRequired()
                                        .HasColumnType("varchar(50)");

                                    b2.HasKey("ContactStudentId");

                                    b2.ToTable("Students");

                                    b2.WithOwner()
                                        .HasForeignKey("ContactStudentId");
                                });

                            b1.OwnsOne("StudentService.Domain.ValueObjects.Address", "TermAddress", b2 =>
                                {
                                    b2.Property<string>("ContactStudentId")
                                        .HasColumnType("varchar(255)");

                                    b2.Property<string>("Country")
                                        .IsRequired()
                                        .HasColumnType("varchar(30)");

                                    b2.Property<string>("County_Region")
                                        .HasColumnType("varchar(50)");

                                    b2.Property<string>("LineOne")
                                        .IsRequired()
                                        .HasColumnType("varchar(100)");

                                    b2.Property<string>("LineThree")
                                        .HasColumnType("varchar(100)");

                                    b2.Property<string>("LineTwo")
                                        .HasColumnType("varchar(100)");

                                    b2.Property<string>("PostCode")
                                        .IsRequired()
                                        .HasColumnType("varchar(20)");

                                    b2.Property<string>("Town_City")
                                        .IsRequired()
                                        .HasColumnType("varchar(50)");

                                    b2.HasKey("ContactStudentId");

                                    b2.ToTable("Students");

                                    b2.WithOwner()
                                        .HasForeignKey("ContactStudentId");
                                });

                            b1.Navigation("PermanentAddress")
                                .IsRequired();

                            b1.Navigation("Student");

                            b1.Navigation("TermAddress")
                                .IsRequired();
                        });

                    b.Navigation("ContactDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentService.Domain.Entities.StudentResult", b =>
                {
                    b.HasOne("StudentService.Domain.Entities.CourseLevel", "CourseLevel")
                        .WithMany()
                        .HasForeignKey("CourseLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentService.Domain.Entities.Transcript", "Transcript")
                        .WithMany("Results")
                        .HasForeignKey("TranscriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseLevel");

                    b.Navigation("Transcript");
                });

            modelBuilder.Entity("StudentService.Domain.Entities.Transcript", b =>
                {
                    b.HasOne("StudentService.Domain.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("StudentService.Domain.Entities.Student", "Student")
                        .WithOne("Transcript")
                        .HasForeignKey("StudentService.Domain.Entities.Transcript", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentService.Domain.Entities.Award", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("StudentService.Domain.Entities.Course", b =>
                {
                    b.Navigation("ContainedAwards");

                    b.Navigation("CourseLevels");

                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("StudentService.Domain.Entities.School", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("StudentService.Domain.Entities.Student", b =>
                {
                    b.Navigation("Enrolments");

                    b.Navigation("Registrations");

                    b.Navigation("Transcript")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentService.Domain.Entities.Subject", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("StudentService.Domain.Entities.Transcript", b =>
                {
                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
